/*
 * Copyright (c) 2007-2011 Inside Secure, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*******************************************************************************
 File auto-generated with the autogen.exe tool - Do not modify manually
 The autogen.exe binary tool, the generation scripts and the files used
 for the source of the generation are available under Apache License, Version 2.0
 ******************************************************************************/

#ifndef __WME_TEST_STUB_AUTOGEN_H
#define __WME_TEST_STUB_AUTOGEN_H

typedef void tW14Part3ExchangeData(W_HANDLE hConnection, tWBasicGenericDataCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pReaderToCardBuffer, uint32_t nReaderToCardBufferLength, uint8_t * pCardToReaderBuffer, uint32_t nCardToReaderBufferMaxLength, W_HANDLE * phOperation);
typedef W_ERROR tW14Part3GetConnectionInfo(W_HANDLE hConnection, tW14Part3ConnectionInfo * p14Part3ConnectionInfo);
typedef W_ERROR tW14Part3ListenToCardDetectionTypeB(tWReaderCardDetectionHandler * pHandler, void * pHandlerParameter, uint8_t nPriority, uint8_t nAFI, bool bUseCID, uint8_t nCID, uint32_t nBaudRate, const uint8_t * pHigherLayerDataBuffer, uint8_t nHigherLayerDataLength, W_HANDLE * phEventRegistry);
typedef W_ERROR tW14Part3SetTimeout(W_HANDLE hConnection, uint32_t nTimeout);
typedef void tW14Part4ExchangeData(W_HANDLE hConnection, tWBasicGenericDataCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pReaderToCardBuffer, uint32_t nReaderToCardBufferLength, uint8_t * pCardToReaderBuffer, uint32_t nCardToReaderBufferMaxLength, W_HANDLE * phOperation);
typedef W_ERROR tW14Part4GetConnectionInfo(W_HANDLE hConnection, tW14Part4ConnectionInfo * p14Part4ConnectionInfo);
typedef W_ERROR tW14Part4ListenToCardDetectionTypeA(tWReaderCardDetectionHandler * pHandler, void * pHandlerParameter, uint8_t nPriority, bool bUseCID, uint8_t nCID, uint32_t nBaudRate, W_HANDLE * phEventRegistry);
typedef W_ERROR tW14Part4ListenToCardDetectionTypeB(tWReaderCardDetectionHandler * pHandler, void * pHandlerParameter, uint8_t nPriority, uint8_t nAFI, bool bUseCID, uint8_t nCID, uint32_t nBaudRate, const uint8_t * pHigherLayerDataBuffer, uint8_t nHigherLayerDataLength, W_HANDLE * phEventRegistry);
typedef W_ERROR tW14Part4SetNAD(W_HANDLE hConnection, uint8_t nNAD);
typedef W_ERROR tW15GetConnectionInfo(W_HANDLE hConnection, tW15ConnectionInfo * pConnectionInfo);
typedef W_ERROR tW15IsWritable(W_HANDLE hConnection, uint8_t nSectorIndex);
typedef W_ERROR tW15ListenToCardDetection(tWReaderCardDetectionHandler * pHandler, void * pHandlerParameter, uint8_t nPriority, uint8_t nAFI, W_HANDLE * phEventRegistry);
typedef void tW15Read(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, W_HANDLE * phOperation);
typedef void tW15SetAttribute(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t nActions, uint8_t nAFI, uint8_t nDSFID, W_HANDLE * phOperation);
typedef W_ERROR tW15SetTagSize(W_HANDLE hConnection, uint16_t nSectorNumber, uint8_t nSectorSize);
typedef void tW15Write(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, bool bLockSectors, W_HANDLE * phOperation);
typedef void tW7816CloseLogicalChannel(W_HANDLE hLogicalChannel, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef void tW7816ExchangeAPDU(W_HANDLE hConnection, tWBasicGenericDataCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pSendAPDUBuffer, uint32_t nSendAPDUBufferLength, uint8_t * pReceivedAPDUBuffer, uint32_t nReceivedAPDUBufferMaxLength, W_HANDLE * phOperation);
typedef W_ERROR tW7816GetATR(W_HANDLE hConnection, uint8_t * pBuffer, uint32_t nBufferMaxLength, uint32_t * pnActualLength);
typedef W_ERROR tW7816GetATRSize(W_HANDLE hConnection, uint32_t * pnSize);
typedef W_ERROR tW7816GetResponseAPDUData(W_HANDLE hConnection, uint8_t * pReceivedAPDUBuffer, uint32_t nReceivedAPDUBufferMaxLength, uint32_t * pnReceivedAPDUActualLength);
typedef void tW7816OpenLogicalChannel(W_HANDLE hConnection, tWBasicGenericHandleCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pAID, uint32_t nAIDLength, W_HANDLE * phOperation);
typedef void tWBasicCancelOperation(W_HANDLE hOperation);
typedef W_ERROR tWBasicCheckConnectionProperty(W_HANDLE hConnection, uint8_t nPropertyIdentifier);
typedef void tWBasicCloseHandle(W_HANDLE hHandle);
typedef void tWBasicCloseHandleSafe(W_HANDLE hHandle, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef W_ERROR tWBasicGetConnectionProperties(W_HANDLE hConnection, uint8_t * pPropertyArray, uint32_t nArrayLength);
typedef W_ERROR tWBasicGetConnectionPropertyNumber(W_HANDLE hConnection, uint32_t * pnPropertyNumber);
typedef void tWBPrimeExchangeData(W_HANDLE hConnection, tWBasicGenericDataCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pReaderToCardBuffer, uint32_t nReaderToCardBufferLength, uint8_t * pCardToReaderBuffer, uint32_t nCardToReaderBufferMaxLength, W_HANDLE * phOperation);
typedef W_ERROR tWBPrimeGetConnectionInfo(W_HANDLE hConnection, tWBPrimeConnectionInfo * pBPrimeConnectionInfo);
typedef W_ERROR tWBPrimeListenToCardDetection(tWReaderCardDetectionHandler * pHandler, void * pHandlerParameter, uint8_t nPriority, const uint8_t * pAPGENBuffer, uint8_t nAPGENLength, W_HANDLE * phEventRegistry);
typedef W_ERROR tWBPrimeSetTimeout(W_HANDLE hConnection, uint32_t nTimeout);
typedef W_ERROR tWBTPairingGetRemoteDeviceInfo(W_HANDLE hOperation, tWBTPairingInfo * pRemoteInfo, tchar * pRemoteDeviceNameBuffer, uint32_t nRemoteDeviceNameBufferLength);
typedef void tWBTPairingStart(uint32_t nMode, const tWBTPairingInfo * pLocalInfo, const tchar * pLocalDeviceName, tWBTPairingStartCompleted * pCallback, void * pCallbackParameter, W_HANDLE * phOperation);
typedef void tWEmulClose(W_HANDLE hHandle, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef W_ERROR tWEmulGetMessageData(W_HANDLE hHandle, uint8_t * pDataBuffer, uint32_t nDataLength, uint32_t * pnActualDataLength);
typedef bool tWEmulIsPropertySupported(uint8_t nPropertyIdentifier);
typedef void tWEmulOpenConnection(tWBasicGenericCallbackFunction * pOpenCallback, void * pOpenCallbackParameter, tWBasicGenericEventHandler * pEventCallback, void * pEventCallbackParameter, tWEmulCommandReceived * pCommandCallback, void * pCommandCallbackParameter, tWEmulConnectionInfo * pEmulConnectionInfo, W_HANDLE * phHandle);
typedef W_ERROR tWEmulSendAnswer(W_HANDLE hDriverConnection, const uint8_t * pDataBuffer, uint32_t nDataLength);
typedef void tWFeliCaExchangeData(W_HANDLE hUserConnection, tWBasicGenericDataCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pReaderToCardBuffer, uint32_t nReaderToCardBufferLength, uint8_t * pCardToReaderBuffer, uint32_t nCardToReaderBufferMaxLength, W_HANDLE * phOperation);
typedef W_ERROR tWFeliCaGetCardList(W_HANDLE hConnection, tWFeliCaConnectionInfo * aFeliCaConnectionInfos, const uint32_t nArraySize);
typedef W_ERROR tWFeliCaGetCardNumber(W_HANDLE hConnection, uint32_t * pnCardNumber);
typedef W_ERROR tWFeliCaGetConnectionInfo(W_HANDLE hConnection, tWFeliCaConnectionInfo * pConnectionInfo);
typedef W_ERROR tWFeliCaListenToCardDetection(tWReaderCardDetectionHandler * pHandler, void * pHandlerParameter, uint8_t nPriority, uint16_t nSystemCode, W_HANDLE * phEventRegistry);
typedef void tWFeliCaRead(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t * pBuffer, uint32_t nLength, uint8_t nNumberOfService, const uint16_t * pServiceCodeList, uint8_t nNumberOfBlocks, const uint8_t * pBlockList, W_HANDLE * phOperation);
typedef void tWFeliCaSelectCard(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const tWFeliCaConnectionInfo * pFeliCaConnectionInfo);
typedef void tWFeliCaSelectSystem(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t nIndexSubSystem);
typedef void tWFeliCaWrite(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pBuffer, uint32_t nLength, uint8_t nNumberOfService, const uint16_t * pServiceCodeList, uint8_t nNumberOfBlocks, const uint8_t * pBlockList, W_HANDLE * phOperation);
typedef W_ERROR tWMifareGetConnectionInfo(W_HANDLE hConnection, tWMifareConnectionInfo * pConnectionInfo);
typedef void tWMifareRead(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, W_HANDLE * phOperation);
typedef void tWMifareULCAuthenticate(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pKey, uint32_t nKeyLength);
typedef void tWMifareULCSetAccessRights(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pKey, uint32_t nKeyLength, uint8_t nThreshold, uint32_t nRights, bool bLockConfiguration);
typedef W_ERROR tWMifareULForceULC(W_HANDLE hConnection);
typedef void tWMifareULFreezeDataLockConfiguration(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef W_ERROR tWMifareULGetAccessRights(W_HANDLE hConnection, uint32_t nOffset, uint32_t nLength, uint32_t * pnRights);
typedef void tWMifareULRetrieveAccessRights(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef void tWMifareWrite(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, bool bLockSectors, W_HANDLE * phOperation);
typedef W_ERROR tWMyDGetConnectionInfo(W_HANDLE hConnection, tWMyDConnectionInfo * pConnectionInfo);
typedef void tWMyDMoveAuthenticate(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint32_t nPassword);
typedef void tWMyDMoveFreezeDataLockConfiguration(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef void tWMyDMoveGetConfiguration(W_HANDLE hConnection, tWMyDMoveGetConfigurationCompleted * pCallback, void * pCallbackParameter);
typedef void tWMyDMoveSetConfiguration(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t nStatusByte, uint8_t nPasswordRetryCounter, uint32_t nPassword, bool bLockConfiguration);
typedef void tWMyDRead(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, W_HANDLE * phOperation);
typedef void tWMyDWrite(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, bool bLockSectors, W_HANDLE * phOperation);
typedef W_ERROR tWNDEFAppendRecord(W_HANDLE hMessage, W_HANDLE hRecord);
typedef W_ERROR tWNDEFBuildMessage(const uint8_t * pBuffer, uint32_t nBufferLength, W_HANDLE * phMessage);
typedef W_ERROR tWNDEFBuildRecord(const uint8_t * pBuffer, uint32_t nBufferLength, W_HANDLE * phRecord);
typedef bool tWNDEFCheckIdentifier(W_HANDLE hRecord, const tchar * pIdentifierString);
typedef bool tWNDEFCheckRecordType(uint8_t nTNF, const tchar * pTypeString);
typedef bool tWNDEFCheckType(W_HANDLE hRecord, uint8_t nTNF, const tchar * pTypeString);
typedef bool tWNDEFCompareRecordType(uint8_t nTNF1, const tchar * pTypeString1, uint8_t nTNF2, const tchar * pTypeString2);
typedef W_ERROR tWNDEFCreateNestedMessageRecord(uint8_t nTNF, const tchar * pTypeString, W_HANDLE hNestedMessage, W_HANDLE * phRecord);
typedef W_ERROR tWNDEFCreateNewMessage(W_HANDLE * phMessage);
typedef W_ERROR tWNDEFCreateRecord(uint8_t nTNF, const tchar * pTypeString, const uint8_t * pPayloadBuffer, uint32_t nPayloadLength, W_HANDLE * phRecord);
typedef W_ERROR tWNDEFGetEnclosedMessage(W_HANDLE hRecord, W_HANDLE * phMessage);
typedef W_ERROR tWNDEFGetIdentifierString(W_HANDLE hRecord, tchar * pIdentifierStringBuffer, uint32_t nIdentifierStringBufferLength, uint32_t * pnActualLength);
typedef W_ERROR tWNDEFGetMessageContent(W_HANDLE hMessage, uint8_t * pMessageBuffer, uint32_t nMessageBufferLength, uint32_t * pnActualLength);
typedef uint32_t tWNDEFGetMessageLength(W_HANDLE hMessage);
typedef W_HANDLE tWNDEFGetNextMessage(W_HANDLE hMessage);
typedef W_ERROR tWNDEFGetPayloadPointer(W_HANDLE hRecord, uint8_t ** ppBuffer);
typedef W_HANDLE tWNDEFGetRecord(W_HANDLE hMessage, uint32_t nIndex);
typedef W_ERROR tWNDEFGetRecordInfo(W_HANDLE hRecord, uint32_t nInfoType, uint32_t * pnValue);
typedef W_ERROR tWNDEFGetRecordInfoBuffer(W_HANDLE hRecord, uint32_t nInfoType, uint8_t * pBuffer, uint32_t nBufferLength, uint32_t * pnActualLength);
typedef uint32_t tWNDEFGetRecordNumber(W_HANDLE hMessage);
typedef W_ERROR tWNDEFGetTagInfo(W_HANDLE hConnection, tNDEFTagInfo * pTagInfo);
typedef W_ERROR tWNDEFGetTypeString(W_HANDLE hRecord, tchar * pTypeStringBuffer, uint32_t nTypeStringBufferLength, uint32_t * pnActualLength);
typedef W_ERROR tWNDEFInsertRecord(W_HANDLE hMessage, uint32_t nIndex, W_HANDLE hRecord);
typedef void tWNDEFReadMessage(W_HANDLE hConnection, tWNDEFReadMessageCompleted * pCallback, void * pCallbackParameter, uint8_t nTNF, const tchar * pTypeString, W_HANDLE * phOperation);
typedef void tWNDEFReadMessageOnAnyTag(tWNDEFReadMessageCompleted * pCallback, void * pCallbackParameter, uint8_t nPriority, uint8_t nTNF, const tchar * pTypeString, W_HANDLE * phRegistry);
typedef W_ERROR tWNDEFRemoveRecord(W_HANDLE hMessage, uint32_t nIndex);
typedef W_ERROR tWNDEFSetIdentifierString(W_HANDLE hRecord, const tchar * pIdentifierString);
typedef W_ERROR tWNDEFSetRecord(W_HANDLE hMessage, uint32_t nIndex, W_HANDLE hRecord);
typedef W_ERROR tWNDEFSetRecordInfo(W_HANDLE hRecord, uint32_t nInfoType, const uint8_t * pBuffer, uint32_t nBufferLength);
typedef void tWNDEFWriteMessage(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, W_HANDLE hMessage, uint32_t nActionMask, W_HANDLE * phOperation);
typedef void tWNDEFWriteMessageOnAnyTag(tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t nPriority, W_HANDLE hMessage, uint32_t nActionMask, W_HANDLE * phOperation);
typedef void tWNFCControllerFirmwareUpdate(tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pUpdateBuffer, uint32_t nUpdateBufferLength, uint32_t nMode);
typedef uint32_t tWNFCControllerFirmwareUpdateState(void);
typedef W_ERROR tWNFCControllerGetBooleanProperty(uint8_t nPropertyIdentifier, bool * pbValue);
typedef W_ERROR tWNFCControllerGetFirmwareProperty(const uint8_t * pUpdateBuffer, uint32_t nUpdateBufferLength, uint8_t nPropertyIdentifier, tchar * pValueBuffer, uint32_t nBufferLength, uint32_t * pnValueLength);
typedef W_ERROR tWNFCControllerGetIntegerProperty(uint8_t nPropertyIdentifier, uint32_t * pnValue);
typedef uint32_t tWNFCControllerGetMode(void);
typedef W_ERROR tWNFCControllerGetProperty(uint8_t nPropertyIdentifier, tchar * pValueBuffer, uint32_t nBufferLength, uint32_t * pnValueLength);
typedef W_ERROR tWNFCControllerGetRawMessageData(uint8_t * pBuffer, uint32_t nBufferLength, uint32_t * pnActualLength);
typedef void tWNFCControllerGetRFActivity(uint8_t * pnReaderState, uint8_t * pnCardState, uint8_t * pnP2PState);
typedef void tWNFCControllerGetRFLock(uint32_t nLockSet, bool * pbReaderLock, bool * pbCardLock);
typedef W_ERROR tWNFCControllerMonitorException(tWBasicGenericEventHandler * pHandler, void * pHandlerParameter, W_HANDLE * phEventRegistry);
typedef W_ERROR tWNFCControllerMonitorFieldEvents(tWBasicGenericEventHandler * pHandler, void * pHandlerParameter, W_HANDLE * phEventRegistry);
typedef void tWNFCControllerProductionTest(const uint8_t * pParameterBuffer, uint32_t nParameterBufferLength, uint8_t * pResultBuffer, uint32_t nResultBufferLength, tWBasicGenericDataCallbackFunction * pCallback, void * pCallbackParameter);
typedef W_ERROR tWNFCControllerRegisterRawListener(tWBasicGenericDataCallbackFunction * pReceiveMessageEventHandler, void * pHandlerParameter);
typedef void tWNFCControllerReset(tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint32_t nMode);
typedef void tWNFCControllerSelfTest(tWNFCControllerSelfTestCompleted * pCallback, void * pCallbackParameter);
typedef void tWNFCControllerSetRFLock(uint32_t nLockSet, bool bReaderLock, bool bCardLock, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef W_ERROR tWNFCControllerSwitchStandbyMode(bool bStandbyOn);
typedef void tWNFCControllerSwitchToRawMode(tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef void tWNFCControllerWriteRawMessage(tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pBuffer, uint32_t nLength);
typedef void tWP2PConnect(W_HANDLE hSocket, W_HANDLE hLink, tWBasicGenericCallbackFunction * pEstablishmentCallback, void * pEstablishmentCallbackParameter);
typedef W_ERROR tWP2PCreateSocket(uint8_t nType, const tchar * pServiceURI, uint8_t nSAP, W_HANDLE * phSocket);
typedef void tWP2PEstablishLink(tWBasicGenericHandleCallbackFunction * pEstablishmentCallback, void * pEstablishmentCallbackParameter, tWBasicGenericCallbackFunction * pReleaseCallback, void * pReleaseCallbackParameter, W_HANDLE * phOperation);
typedef W_ERROR tWP2PGetConfiguration(tWP2PConfiguration * pConfiguration);
typedef W_ERROR tWP2PGetLinkProperties(W_HANDLE hLink, tWP2PLinkProperties * pProperties);
typedef W_ERROR tWP2PGetSocketParameter(W_HANDLE hSocket, uint32_t nParameter, uint32_t * pnValue);
typedef void tWP2PRead(W_HANDLE hSocket, tWBasicGenericDataCallbackFunction * pCallback, void * pCallbackParameter, uint8_t * pReceptionBuffer, uint32_t nReceptionBufferLength, W_HANDLE * phOperation);
typedef void tWP2PRecvFrom(W_HANDLE hSocket, tWP2PRecvFromCompleted * pCallback, void * pCallbackParameter, uint8_t * pReceptionBuffer, uint32_t nReceptionBufferLength, W_HANDLE * phOperation);
typedef void tWP2PSendTo(W_HANDLE hSocket, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t nSAP, const uint8_t * pSendBuffer, uint32_t nSendBufferLength, W_HANDLE * phOperation);
typedef W_ERROR tWP2PSetConfiguration(const tWP2PConfiguration * pConfiguration);
typedef W_ERROR tWP2PSetSocketParameter(W_HANDLE hSocket, uint32_t nParameter, uint32_t nValue);
typedef void tWP2PShutdown(W_HANDLE hSocket, tWBasicGenericCallbackFunction * pReleaseCallback, void * pReleaseCallbackParameter);
typedef void tWP2PURILookup(W_HANDLE hLink, tWP2PURILookupCompleted * pCallback, void * pCallbackParameter, const tchar * pServiceURI);
typedef void tWP2PWrite(W_HANDLE hSocket, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pSendBuffer, uint32_t nSendBufferLength, W_HANDLE * phOperation);
typedef W_ERROR tWPicoGetConnectionInfo(W_HANDLE hConnection, tWPicoConnectionInfo * pConnectionInfo);
typedef W_ERROR tWPicoIsWritable(W_HANDLE hConnection);
typedef void tWPicoRead(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, W_HANDLE * phOperation);
typedef void tWPicoWrite(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, bool bLockCard, W_HANDLE * phOperation);
typedef W_ERROR tWReaderErrorEventRegister(tWBasicGenericEventHandler * pHandler, void * pHandlerParameter, uint8_t nEventType, bool bCardDetectionRequested, W_HANDLE * phRegistryHandle);
typedef W_ERROR tWReaderGetPulsePeriod(uint32_t * pnTimeout);
typedef void tWReaderHandlerWorkPerformed(W_HANDLE hConnection, bool bGiveToNextListener, bool bCardApplicationMatch);
typedef bool tWReaderIsPropertySupported(uint8_t nPropertyIdentifier);
typedef W_ERROR tWReaderListenToCardDetection(tWReaderCardDetectionHandler * pHandler, void * pHandlerParameter, uint8_t nPriority, const uint8_t * pConnectionPropertyArray, uint32_t nPropertyNumber, W_HANDLE * phEventRegistry);
typedef bool tWReaderPreviousApplicationMatch(W_HANDLE hConnection);
typedef void tWReaderSetPulsePeriod(tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint32_t nPulsePeriod);
typedef bool tWRTDIsTextRecord(W_HANDLE hRecord);
typedef bool tWRTDIsURIRecord(W_HANDLE hRecord);
typedef W_ERROR tWRTDTextAddRecord(W_HANDLE hMessage, const tchar * pLanguage, bool bUseUtf8, const tchar * pText, uint32_t nTextLength);
typedef W_ERROR tWRTDTextCreateRecord(const tchar * pLanguage, bool bUseUtf8, const tchar * pText, uint32_t nTextLength, W_HANDLE * phRecord);
typedef W_ERROR tWRTDTextFind(W_HANDLE hMessage, const tchar * pLanguage1, const tchar * pLanguage2, W_HANDLE * phRecord, uint8_t * pnMatch);
typedef W_ERROR tWRTDTextGetLanguage(W_HANDLE hRecord, tchar * pLanguageBuffer, uint32_t nBufferLength);
typedef uint32_t tWRTDTextGetLength(W_HANDLE hRecord);
typedef W_ERROR tWRTDTextGetValue(W_HANDLE hRecord, tchar * pBuffer, uint32_t nBufferLength);
typedef uint8_t tWRTDTextLanguageMatch(W_HANDLE hRecord, const tchar * pLanguage1, const tchar * pLanguage2);
typedef W_ERROR tWRTDURIAddRecord(W_HANDLE hMessage, const tchar * pURI);
typedef W_ERROR tWRTDURICreateRecord(const tchar * pURI, W_HANDLE * phRecord);
typedef uint32_t tWRTDURIGetLength(W_HANDLE hRecord);
typedef W_ERROR tWRTDURIGetValue(W_HANDLE hRecord, tchar * pBuffer, uint32_t nBufferLength);
typedef W_ERROR tWSecurityAuthenticate(const uint8_t * pApplicationDataBuffer, uint32_t nApplicationDataBufferLength);
typedef W_ERROR tWSEGetInfo(uint32_t nSlotIdentifier, tSEInfo * pSEInfo);
typedef uint32_t tWSEGetTransactionAID(uint32_t nSlotIdentifier, uint8_t * pBuffer, uint32_t nBufferLength);
typedef W_ERROR tWSEMonitorEndOfTransaction(uint32_t nSlotIdentifier, tWBasicGenericEventHandler2 * pHandler, void * pHandlerParameter, W_HANDLE * phEventRegistry);
typedef W_ERROR tWSEMonitorHotPlugEvents(uint32_t nSlotIdentifier, tWBasicGenericEventHandler2 * pHandler, void * pHandlerParameter, W_HANDLE * phEventRegistry);
typedef void tWSEOpenConnection(uint32_t nSlotIdentifier, bool bForce, tWBasicGenericHandleCallbackFunction * pCallback, void * pCallbackParameter);
typedef void tWSESetPolicy(uint32_t nSlotIdentifier, uint32_t nStorageType, uint32_t nProtocols, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef void * tWTestAlloc(uint32_t nSize);
typedef sint32_t tWTestCompare(const void * pBuffer1, const void * pBuffer2, uint32_t nLength);
typedef uint32_t tWTestConvertUTF16ToUTF8(uint8_t * pDestUtf8, const tchar * pSourceUtf16, uint32_t nSourceCharLength);
typedef void * tWTestCopy(void * pDestination, void * pSource, uint32_t nLength);
typedef void tWTestExecuteRemoteFunction(const char * pFunctionIdentifier, uint32_t nParameter, const uint8_t * pParameterBuffer, uint32_t nParameterBufferLength, uint8_t * pResultBuffer, uint32_t nResultBufferLength, tWBasicGenericDataCallbackFunction * pCallback, void * pCallbackParameter);
typedef void tWTestFill(void * pBuffer, uint8_t nValue, uint32_t nLength);
typedef void tWTestFree(void * pBuffer);
typedef const void * tWTestGetConstAddress(const void * pConstData);
typedef uint32_t tWTestGetCurrentTime(void);
typedef tTestExecuteContext * tWTestGetExecuteContext(void);
typedef bool tWTestIsInAutomaticMode(void);
typedef void tWTestMessageBox(uint32_t nFlags, const char * pMessage, uint32_t nAutomaticResult, tWTestMessageBoxCompleted * pCallback, void * pCallbackParameter);
typedef void * tWTestMove(void * pDestination, void * pSource, uint32_t nLength);
typedef void tWTestNotifyEnd(void);
typedef void tWTestPresentObject(const char * pObjectName, const char * pOperatorMessage, uint32_t nDistance, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef void tWTestRemoveObject(const char * pOperatorMessage, bool bSaveState, bool bCheckUnmodifiedState, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef void tWTestSetResult(uint32_t nResult, const void * pResultData, uint32_t nResultDataLength);
typedef void tWTestSetTimer(uint32_t nTimeout, tWBasicGenericCompletionFunction * pCallback, void * pCallbackParameter);
typedef sint32_t tWTestStringCompare(const tchar * pString1, const tchar * pString2);
typedef tchar * tWTestStringCopy(tchar * pBuffer, uint32_t * pnPos, const tchar * pString);
typedef uint32_t tWTestStringLength(const tchar * pString);
typedef void tWTestTraceBuffer(const uint8_t * pBuffer, uint32_t nLength);
typedef void tWTestTraceError(const char * pMessage, ...);
typedef void tWTestTraceInfo(const char * pMessage, ...);
typedef void tWTestTraceWarning(const char * pMessage, ...);
typedef uint32_t tWTestWriteDecimalUint32(tchar * pStringBuffer, uint32_t nValue);
typedef uint32_t tWTestWriteHexaUint32(tchar * pStringBuffer, uint32_t nValue);
typedef uint32_t tWTestWriteHexaUint8(tchar * pStringBuffer, uint8_t nValue);
typedef W_ERROR tWType1ChipGetConnectionInfo(W_HANDLE hConnection, tWType1ChipConnectionInfo * pConnectionInfo);
typedef W_ERROR tWType1ChipIsWritable(W_HANDLE hConnection);
typedef void tWType1ChipRead(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, W_HANDLE * phOperation);
typedef void tWType1ChipWrite(W_HANDLE hConnection, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, const uint8_t * pBuffer, uint32_t nOffset, uint32_t nLength, bool bLockBlocks, W_HANDLE * phOperation);
typedef void tWUICCActivateSWPLine(tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef void tWUICCGetAccessPolicy(uint32_t nStorageType, tWUICCAccessPolicy * pAccessPolicy);
typedef W_ERROR tWUICCGetConnectivityEventParameter(uint8_t * pDataBuffer, uint32_t nBufferLength, uint32_t * pnActualDataLength);
typedef void tWUICCGetSlotInfo(tWUICCGetSlotInfoCompleted * pCallback, void * pCallbackParameter);
typedef uint32_t tWUICCGetTransactionEventAID(uint8_t * pBuffer, uint32_t nBufferLength);
typedef W_ERROR tWUICCMonitorConnectivityEvent(tWUICCMonitorConnectivityEventHandler * pHandler, void * pHandlerParameter, W_HANDLE * phEventRegistry);
typedef W_ERROR tWUICCMonitorTransactionEvent(tWUICCMonitorTransactionEventHandler * pHandler, void * pHandlerParameter, W_HANDLE * phEventRegistry);
typedef void tWUICCSetAccessPolicy(uint32_t nStorageType, const tWUICCAccessPolicy * pAccessPolicy, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter);
typedef W_ERROR tWVirtualTagCreate(uint8_t nTagType, const uint8_t * pIdentifier, uint32_t nIdentifierLength, uint32_t nMaximumMessageLength, W_HANDLE * phVirtualTag);
typedef void tWVirtualTagStart(W_HANDLE hVirtualTag, tWBasicGenericCallbackFunction * pCompletionCallback, void * pCompletionCallbackParameter, tWBasicGenericEventHandler * pEventCallback, void * pEventCallbackParameter, bool bReadOnly);
typedef void tWVirtualTagStop(W_HANDLE hVirtualTag, tWBasicGenericCallbackFunction * pCompletionCallback, void * pCallbackParameter);
typedef void tWWIFIAccessPointConfigureToken(uint8_t nVersion, const uint8_t * pCredentialBuffer, uint32_t nCredentialLength, tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, W_HANDLE * phOperation);
typedef void tWWIFIAccessPointPairingStart(tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, tWBasicGenericEventHandler * pM1EventReadCallback, void * pM1EventReadCallbackParameter, W_HANDLE * phOperation);
typedef void tWWIFIEnrolleePairingStart(const uint8_t * pMessageM1, uint32_t nMessageM1Length, tWWIFIEnrolleePairingStartCompleted * pCallback, void * pCallbackParameter, W_HANDLE * phOperation);
typedef W_ERROR tWWIFIGetCredentialInfo(W_HANDLE hOperation, uint8_t * pVersion, uint8_t * pCredentialBuffer, uint32_t nCredentialLength);
typedef W_ERROR tWWIFIGetOOBDevicePasswordInfo(W_HANDLE hOperation, tWWIFIOOBDevicePasswordInfo * pOOBDevicePasswordInfo, uint8_t * pVersion, uint8_t * pDevicePasswordBuffer, uint32_t nDevicePasswordLength);
typedef void tWWIFIInfoPairingTransmit(tWBasicGenericCallbackFunction * pCallback, void * pCallbackParameter, tWBasicGenericEventHandler * pEventWriteCallback, void * pEventWriteCallbackParameter, W_HANDLE * phOperation);
typedef W_ERROR tWWIFIPairingGetMessageM(W_HANDLE hOperation, uint8_t * pMessageMBuffer, uint32_t nMessageMLength);
typedef uint32_t tWWIFIPairingGetMessageMLength(W_HANDLE hOperation);
typedef W_ERROR tWWIFIPairingWriteMessageM2(W_HANDLE hOperation, const uint8_t * pMessageM2Buffer, uint32_t nMessageM2Length);


typedef struct __tTestAPI
{
   tW14Part3ExchangeData* W14Part3ExchangeData;
   tW14Part3GetConnectionInfo* W14Part3GetConnectionInfo;
   tW14Part3ListenToCardDetectionTypeB* W14Part3ListenToCardDetectionTypeB;
   tW14Part3SetTimeout* W14Part3SetTimeout;
   tW14Part4ExchangeData* W14Part4ExchangeData;
   tW14Part4GetConnectionInfo* W14Part4GetConnectionInfo;
   tW14Part4ListenToCardDetectionTypeA* W14Part4ListenToCardDetectionTypeA;
   tW14Part4ListenToCardDetectionTypeB* W14Part4ListenToCardDetectionTypeB;
   tW14Part4SetNAD* W14Part4SetNAD;
   tW15GetConnectionInfo* W15GetConnectionInfo;
   tW15IsWritable* W15IsWritable;
   tW15ListenToCardDetection* W15ListenToCardDetection;
   tW15Read* W15Read;
   tW15SetAttribute* W15SetAttribute;
   tW15SetTagSize* W15SetTagSize;
   tW15Write* W15Write;
   tW7816CloseLogicalChannel* W7816CloseLogicalChannel;
   tW7816ExchangeAPDU* W7816ExchangeAPDU;
   tW7816GetATR* W7816GetATR;
   tW7816GetATRSize* W7816GetATRSize;
   tW7816GetResponseAPDUData* W7816GetResponseAPDUData;
   tW7816OpenLogicalChannel* W7816OpenLogicalChannel;
   tWBasicCancelOperation* WBasicCancelOperation;
   tWBasicCheckConnectionProperty* WBasicCheckConnectionProperty;
   tWBasicCloseHandle* WBasicCloseHandle;
   tWBasicCloseHandleSafe* WBasicCloseHandleSafe;
   tWBasicGetConnectionProperties* WBasicGetConnectionProperties;
   tWBasicGetConnectionPropertyNumber* WBasicGetConnectionPropertyNumber;
   tWBPrimeExchangeData* WBPrimeExchangeData;
   tWBPrimeGetConnectionInfo* WBPrimeGetConnectionInfo;
   tWBPrimeListenToCardDetection* WBPrimeListenToCardDetection;
   tWBPrimeSetTimeout* WBPrimeSetTimeout;
   tWBTPairingGetRemoteDeviceInfo* WBTPairingGetRemoteDeviceInfo;
   tWBTPairingStart* WBTPairingStart;
   tWEmulClose* WEmulClose;
   tWEmulGetMessageData* WEmulGetMessageData;
   tWEmulIsPropertySupported* WEmulIsPropertySupported;
   tWEmulOpenConnection* WEmulOpenConnection;
   tWEmulSendAnswer* WEmulSendAnswer;
   tWFeliCaExchangeData* WFeliCaExchangeData;
   tWFeliCaGetCardList* WFeliCaGetCardList;
   tWFeliCaGetCardNumber* WFeliCaGetCardNumber;
   tWFeliCaGetConnectionInfo* WFeliCaGetConnectionInfo;
   tWFeliCaListenToCardDetection* WFeliCaListenToCardDetection;
   tWFeliCaRead* WFeliCaRead;
   tWFeliCaSelectCard* WFeliCaSelectCard;
   tWFeliCaSelectSystem* WFeliCaSelectSystem;
   tWFeliCaWrite* WFeliCaWrite;
   tWMifareGetConnectionInfo* WMifareGetConnectionInfo;
   tWMifareRead* WMifareRead;
   tWMifareULCAuthenticate* WMifareULCAuthenticate;
   tWMifareULCSetAccessRights* WMifareULCSetAccessRights;
   tWMifareULForceULC* WMifareULForceULC;
   tWMifareULFreezeDataLockConfiguration* WMifareULFreezeDataLockConfiguration;
   tWMifareULGetAccessRights* WMifareULGetAccessRights;
   tWMifareULRetrieveAccessRights* WMifareULRetrieveAccessRights;
   tWMifareWrite* WMifareWrite;
   tWMyDGetConnectionInfo* WMyDGetConnectionInfo;
   tWMyDMoveAuthenticate* WMyDMoveAuthenticate;
   tWMyDMoveFreezeDataLockConfiguration* WMyDMoveFreezeDataLockConfiguration;
   tWMyDMoveGetConfiguration* WMyDMoveGetConfiguration;
   tWMyDMoveSetConfiguration* WMyDMoveSetConfiguration;
   tWMyDRead* WMyDRead;
   tWMyDWrite* WMyDWrite;
   tWNDEFAppendRecord* WNDEFAppendRecord;
   tWNDEFBuildMessage* WNDEFBuildMessage;
   tWNDEFBuildRecord* WNDEFBuildRecord;
   tWNDEFCheckIdentifier* WNDEFCheckIdentifier;
   tWNDEFCheckRecordType* WNDEFCheckRecordType;
   tWNDEFCheckType* WNDEFCheckType;
   tWNDEFCompareRecordType* WNDEFCompareRecordType;
   tWNDEFCreateNestedMessageRecord* WNDEFCreateNestedMessageRecord;
   tWNDEFCreateNewMessage* WNDEFCreateNewMessage;
   tWNDEFCreateRecord* WNDEFCreateRecord;
   tWNDEFGetEnclosedMessage* WNDEFGetEnclosedMessage;
   tWNDEFGetIdentifierString* WNDEFGetIdentifierString;
   tWNDEFGetMessageContent* WNDEFGetMessageContent;
   tWNDEFGetMessageLength* WNDEFGetMessageLength;
   tWNDEFGetNextMessage* WNDEFGetNextMessage;
   tWNDEFGetPayloadPointer* WNDEFGetPayloadPointer;
   tWNDEFGetRecord* WNDEFGetRecord;
   tWNDEFGetRecordInfo* WNDEFGetRecordInfo;
   tWNDEFGetRecordInfoBuffer* WNDEFGetRecordInfoBuffer;
   tWNDEFGetRecordNumber* WNDEFGetRecordNumber;
   tWNDEFGetTagInfo* WNDEFGetTagInfo;
   tWNDEFGetTypeString* WNDEFGetTypeString;
   tWNDEFInsertRecord* WNDEFInsertRecord;
   tWNDEFReadMessage* WNDEFReadMessage;
   tWNDEFReadMessageOnAnyTag* WNDEFReadMessageOnAnyTag;
   tWNDEFRemoveRecord* WNDEFRemoveRecord;
   tWNDEFSetIdentifierString* WNDEFSetIdentifierString;
   tWNDEFSetRecord* WNDEFSetRecord;
   tWNDEFSetRecordInfo* WNDEFSetRecordInfo;
   tWNDEFWriteMessage* WNDEFWriteMessage;
   tWNDEFWriteMessageOnAnyTag* WNDEFWriteMessageOnAnyTag;
   tWNFCControllerFirmwareUpdate* WNFCControllerFirmwareUpdate;
   tWNFCControllerFirmwareUpdateState* WNFCControllerFirmwareUpdateState;
   tWNFCControllerGetBooleanProperty* WNFCControllerGetBooleanProperty;
   tWNFCControllerGetFirmwareProperty* WNFCControllerGetFirmwareProperty;
   tWNFCControllerGetIntegerProperty* WNFCControllerGetIntegerProperty;
   tWNFCControllerGetMode* WNFCControllerGetMode;
   tWNFCControllerGetProperty* WNFCControllerGetProperty;
   tWNFCControllerGetRawMessageData* WNFCControllerGetRawMessageData;
   tWNFCControllerGetRFActivity* WNFCControllerGetRFActivity;
   tWNFCControllerGetRFLock* WNFCControllerGetRFLock;
   tWNFCControllerMonitorException* WNFCControllerMonitorException;
   tWNFCControllerMonitorFieldEvents* WNFCControllerMonitorFieldEvents;
   tWNFCControllerProductionTest* WNFCControllerProductionTest;
   tWNFCControllerRegisterRawListener* WNFCControllerRegisterRawListener;
   tWNFCControllerReset* WNFCControllerReset;
   tWNFCControllerSelfTest* WNFCControllerSelfTest;
   tWNFCControllerSetRFLock* WNFCControllerSetRFLock;
   tWNFCControllerSwitchStandbyMode* WNFCControllerSwitchStandbyMode;
   tWNFCControllerSwitchToRawMode* WNFCControllerSwitchToRawMode;
   tWNFCControllerWriteRawMessage* WNFCControllerWriteRawMessage;
   tWP2PConnect* WP2PConnect;
   tWP2PCreateSocket* WP2PCreateSocket;
   tWP2PEstablishLink* WP2PEstablishLink;
   tWP2PGetConfiguration* WP2PGetConfiguration;
   tWP2PGetLinkProperties* WP2PGetLinkProperties;
   tWP2PGetSocketParameter* WP2PGetSocketParameter;
   tWP2PRead* WP2PRead;
   tWP2PRecvFrom* WP2PRecvFrom;
   tWP2PSendTo* WP2PSendTo;
   tWP2PSetConfiguration* WP2PSetConfiguration;
   tWP2PSetSocketParameter* WP2PSetSocketParameter;
   tWP2PShutdown* WP2PShutdown;
   tWP2PURILookup* WP2PURILookup;
   tWP2PWrite* WP2PWrite;
   tWPicoGetConnectionInfo* WPicoGetConnectionInfo;
   tWPicoIsWritable* WPicoIsWritable;
   tWPicoRead* WPicoRead;
   tWPicoWrite* WPicoWrite;
   tWReaderErrorEventRegister* WReaderErrorEventRegister;
   tWReaderGetPulsePeriod* WReaderGetPulsePeriod;
   tWReaderHandlerWorkPerformed* WReaderHandlerWorkPerformed;
   tWReaderIsPropertySupported* WReaderIsPropertySupported;
   tWReaderListenToCardDetection* WReaderListenToCardDetection;
   tWReaderPreviousApplicationMatch* WReaderPreviousApplicationMatch;
   tWReaderSetPulsePeriod* WReaderSetPulsePeriod;
   tWRTDIsTextRecord* WRTDIsTextRecord;
   tWRTDIsURIRecord* WRTDIsURIRecord;
   tWRTDTextAddRecord* WRTDTextAddRecord;
   tWRTDTextCreateRecord* WRTDTextCreateRecord;
   tWRTDTextFind* WRTDTextFind;
   tWRTDTextGetLanguage* WRTDTextGetLanguage;
   tWRTDTextGetLength* WRTDTextGetLength;
   tWRTDTextGetValue* WRTDTextGetValue;
   tWRTDTextLanguageMatch* WRTDTextLanguageMatch;
   tWRTDURIAddRecord* WRTDURIAddRecord;
   tWRTDURICreateRecord* WRTDURICreateRecord;
   tWRTDURIGetLength* WRTDURIGetLength;
   tWRTDURIGetValue* WRTDURIGetValue;
   tWSecurityAuthenticate* WSecurityAuthenticate;
   tWSEGetInfo* WSEGetInfo;
   tWSEGetTransactionAID* WSEGetTransactionAID;
   tWSEMonitorEndOfTransaction* WSEMonitorEndOfTransaction;
   tWSEMonitorHotPlugEvents* WSEMonitorHotPlugEvents;
   tWSEOpenConnection* WSEOpenConnection;
   tWSESetPolicy* WSESetPolicy;
   tWTestAlloc* WTestAlloc;
   tWTestCompare* WTestCompare;
   tWTestConvertUTF16ToUTF8* WTestConvertUTF16ToUTF8;
   tWTestCopy* WTestCopy;
   tWTestExecuteRemoteFunction* WTestExecuteRemoteFunction;
   tWTestFill* WTestFill;
   tWTestFree* WTestFree;
   tWTestGetConstAddress* WTestGetConstAddress;
   tWTestGetCurrentTime* WTestGetCurrentTime;
   tWTestGetExecuteContext* WTestGetExecuteContext;
   tWTestIsInAutomaticMode* WTestIsInAutomaticMode;
   tWTestMessageBox* WTestMessageBox;
   tWTestMove* WTestMove;
   tWTestNotifyEnd* WTestNotifyEnd;
   tWTestPresentObject* WTestPresentObject;
   tWTestRemoveObject* WTestRemoveObject;
   tWTestSetResult* WTestSetResult;
   tWTestSetTimer* WTestSetTimer;
   tWTestStringCompare* WTestStringCompare;
   tWTestStringCopy* WTestStringCopy;
   tWTestStringLength* WTestStringLength;
   tWTestTraceBuffer* WTestTraceBuffer;
   tWTestTraceError* WTestTraceError;
   tWTestTraceInfo* WTestTraceInfo;
   tWTestTraceWarning* WTestTraceWarning;
   tWTestWriteDecimalUint32* WTestWriteDecimalUint32;
   tWTestWriteHexaUint32* WTestWriteHexaUint32;
   tWTestWriteHexaUint8* WTestWriteHexaUint8;
   tWType1ChipGetConnectionInfo* WType1ChipGetConnectionInfo;
   tWType1ChipIsWritable* WType1ChipIsWritable;
   tWType1ChipRead* WType1ChipRead;
   tWType1ChipWrite* WType1ChipWrite;
   tWUICCActivateSWPLine* WUICCActivateSWPLine;
   tWUICCGetAccessPolicy* WUICCGetAccessPolicy;
   tWUICCGetConnectivityEventParameter* WUICCGetConnectivityEventParameter;
   tWUICCGetSlotInfo* WUICCGetSlotInfo;
   tWUICCGetTransactionEventAID* WUICCGetTransactionEventAID;
   tWUICCMonitorConnectivityEvent* WUICCMonitorConnectivityEvent;
   tWUICCMonitorTransactionEvent* WUICCMonitorTransactionEvent;
   tWUICCSetAccessPolicy* WUICCSetAccessPolicy;
   tWVirtualTagCreate* WVirtualTagCreate;
   tWVirtualTagStart* WVirtualTagStart;
   tWVirtualTagStop* WVirtualTagStop;
   tWWIFIAccessPointConfigureToken* WWIFIAccessPointConfigureToken;
   tWWIFIAccessPointPairingStart* WWIFIAccessPointPairingStart;
   tWWIFIEnrolleePairingStart* WWIFIEnrolleePairingStart;
   tWWIFIGetCredentialInfo* WWIFIGetCredentialInfo;
   tWWIFIGetOOBDevicePasswordInfo* WWIFIGetOOBDevicePasswordInfo;
   tWWIFIInfoPairingTransmit* WWIFIInfoPairingTransmit;
   tWWIFIPairingGetMessageM* WWIFIPairingGetMessageM;
   tWWIFIPairingGetMessageMLength* WWIFIPairingGetMessageMLength;
   tWWIFIPairingWriteMessageM2* WWIFIPairingWriteMessageM2;
} tTestAPI;

#define P_TEST_INTERFACE_UUID_LENGTH  16
#define P_TEST_INTERFACE_UUID { 0x49, 0x1B, 0xA2, 0x2E, 0x27, 0x46, 0xF8, 0x00, 0xE5, 0x79, 0x64, 0x8D, 0x44, 0x2B, 0x5B, 0x55, }
#ifndef OPEN_NFC_BUILD_NUMBER
#define OPEN_NFC_BUILD_NUMBER 0
#define OPEN_NFC_BUILD_NUMBER_S  { '0',  0 }
#endif /* #ifndef OPEN_NFC_BUILD_NUMBER */
#ifndef OPEN_NFC_PRODUCT_SIMPLE_VERSION
#define OPEN_NFC_PRODUCT_SIMPLE_VERSION 4.3
#define OPEN_NFC_PRODUCT_SIMPLE_VERSION_S  { '4', '.', '3',  0 }
#endif /* #ifndef OPEN_NFC_PRODUCT_SIMPLE_VERSION */
#ifndef OPEN_NFC_PRODUCT_VERSION
#define OPEN_NFC_PRODUCT_VERSION v4.3 (Build 0)
#define OPEN_NFC_PRODUCT_VERSION_S  { 'v', '4', '.', '3', ' ', '(', 'B', 'u', 'i', 'l', 'd', ' ', '0', ')',  0 }
#endif /* #ifndef OPEN_NFC_PRODUCT_VERSION */

#endif /* #ifdef __WME_TEST_STUB_AUTOGEN_H */
